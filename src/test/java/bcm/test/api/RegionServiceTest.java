package bcm.test.api;

import bcm.test.model.GeoPolygon;
import bcm.test.model.GeoRectangle;
import bcm.test.model.RegionPolygon;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.util.Map;

import static org.mockito.Mockito.when;

public class RegionServiceTest {

    @Test
    public void parseJsonToPolygon_test() throws Exception {

        RegionClient client = Mockito.mock(RegionClient.class);

        String source = "{\"type\": \"Polygon\", \"coordinates\": [[[6.940790195722472, 47.43332425184562], [6.94065973323084, 47.431022225751434], [6.940990381448314, 47.42944408233319]]]}";

        RegionService service = new RegionService(client);

        GeoPolygon polygon = service.parseJsonToPolygon(source);
        if (polygon instanceof RegionPolygon) {
            Assert.assertEquals( polygon.getType(), "Polygon");
            Assert.assertEquals(((RegionPolygon)polygon).getGeometry().get(0).size(), 3);
        }
    }

    @Test
    public void retrieveRegionsBounds_test() throws Exception {
        RegionClient client = Mockito.mock(RegionClient.class);
        String content = "Geo Point;Geo Shape;Region;New Code\n" +
                "47.2343259364, 4.80741114904;\"{\"\"type\"\": \"\"Polygon\"\", \"\"coordinates\"\": [[[6.940790195722472, 47.43332425184562], [6.94065973323084, 47.431022225751434], [6.940990381448314, 47.42944408233319], [6.942130608356922, 47.41632441257718], [6.942059859791139, 47.41545285501724], [6.941719753516403, 47.41403353635834], [6.941420134037844, 47.41160402813157], [6.939000654245305, 47.40607315285594], [6.935019856626449, 47.40584334804092], [6.929290758130047, 47.40570452640614], [6.927700161088262, 47.405844070725266], [6.92620077992306, 47.40591287287872], [6.92489059645188, 47.40588330637806], [6.923870395202761, 47.40581331898388], [6.922970393032938, 47.4056735207008], [6.921300744217509, 47.40521221167127], [6.920200727770746, 47.40658335909907], [6.918300619256053, 47.40579357647111], [6.918151732277831, 47.40558269066222], [6.915601073735661, 47.404953867516305], [6.914041829638195, 47.40464396334686], [6.915801252065632, 47.40413351901872], [6.916891695265419, 47.4040129146061], [6.91731058403326, 47.4039333532382], [6.917790699832389, 47.40373471447439], [6.918250412297967, 47.40326332090632], [6.918120572637681, 47.40297322531861], [6.917690242636013, 47.402353340142405], [6.91747052398577, 47.4014949070076], [6.917120846709553, 47.400663299542884], [6.916230913180923, 47.39945358563934], [6.916311092804104, 47.39925427222903], [6.916031390157221, 47.3988121669499], [6.916020986708594, 47.39805383423476], [6.916110808506609, 47.397223399919824], [6.913621098799872, 47.39703396052848], [6.911461988961845, 47.396693060575465], [6.910001579974812, 47.39627390646226], [6.910791136699875, 47.39493371610249], [6.910961156719384, 47.394523359623875], [6.911980576422541, 47.39384299763159], [6.911761376127871, 47.3927233624892], [6.9115808156756, 47.39198311841046], [6.911600368797116, 47.39150232299067], [6.91176142767861, 47.39102315428432], [6.912001953876769, 47.390672975563795], [6.912271704853239, 47.39043312863441], [6.912950704683319, 47.39000262336092], [6.91404028811267, 47.38959198966287], [6.914210932911771, 47.38947271200108], [6.914320553775718, 47.38933313945645], [6.914311496355726, 47.3889443180089], [6.913911132135005, 47.38803418918987], [6.913190857894829, 47.38706239731979], [6.91259187884683, 47.386423365320475], [6.911861085537699, 47.385842194935904], [6.91065092175295, 47.38518295087706], [6.90917164686303, 47.38459318097831], [6.907021448517884, 47.38385339581453], [6.905762057324628, 47.383452061762036], [6.905581131666579, 47.38265298352992], [6.897781991733198, 47.38239320000846], [6.896922255467151, 47.38227433814135], [6.895641859802943, 47.38187475907849], [6.896372136647603, 47.38005285641416], [6.894171110755607, 47.37912284332974], [6.892521946230332, 47.37837233944258], [6.889262694594668, 47.376793337245964], [6.887631982642546, 47.375723063474574], [6.88575316902533, 47.374433364996925], [6.884841719573127, 47.373723919427086], [6.884301649961092, 47.37316399011419], [6.884141305540381, 47.372762543984116], [6.884212337675045, 47.372134180887045], [6.884711216295052, 47.369413042976056], [6.885222238509217, 47.36751209386753], [6.885211550077195, 47.36717288993521], [6.885082462420476, 47.3668527979845]]]}\";Bourgogne-Franche-Comte;27";
        when(client.streamData()).thenReturn(new ByteArrayInputStream(content.getBytes()));
        RegionService service = new RegionService(client);

        Map<String, GeoRectangle> result = service.retrieveRegionsBounds();

        Assert.assertEquals(result.size(),1);
        Assert.assertTrue(result.get("Bourgogne-Franche-Comte") instanceof GeoRectangle);
    }
}
